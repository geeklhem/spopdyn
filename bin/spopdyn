# -*-Python-*-
#!/usr/bin/env python
import sys
import os
import spopdyn.sbml_writer
import spopdyn.libpssa_config
import spopdyn.extract
import spopdyn.display
import subprocess
import logging
import cPickle as pickle 
import numpy as np
import matplotlib.pyplot as plt
import glob

logger = logging.getLogger("spopdyn")
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch.setFormatter(logging.Formatter('%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(ch)

logging.addLevelName( logging.WARNING, "\033[1;31m%s\033[1;0m" % logging.getLevelName(logging.WARNING))
logging.addLevelName( logging.ERROR, "\033[1;41m%s\033[1;0m" % logging.getLevelName(logging.ERROR))
logging.addLevelName( logging.INFO, "\033[1;42m%s\033[1;0m" % logging.getLevelName(logging.INFO))
logging.addLevelName( logging.DEBUG, "\033[1;43m%s\033[1;0m" % logging.getLevelName(logging.DEBUG))
logging.getLogger().addFilter(logging.Filter("vcontact"))

if __name__ == "__main__":

    SPECIES = 20
    GRIDPOINTS = 25

    if len(sys.argv) == 1:
        print "Usage: name [nb of species] [gridpoints] [alpha]"
        exit(1)
    if len(sys.argv)>2:
        SPECIES = int(sys.argv[2])
    if len(sys.argv)>3:
        GRIDPOINTS = int(sys.argv[3])
    if len(sys.argv)>4:
        ALPHA= float(sys.argv[4])
        
    spatial = True 
    name = sys.argv[1]

    if not os.path.exists(name):
        os.mkdir(name)
        logger.info("Directory {}/ created.".format(name))    
    else:
        logger.warning("{}/ exists already.".format(name))

    sbml_file = name+"/model.sbml" 
    config_file = name+"/config.cfg"
    data_file = name+"/data.pkle"
    
    if not os.path.exists(sbml_file):
        sbml = spopdyn.sbml_writer.CompetitiveLV(SPECIES,1,ALPHA,20,GRIDPOINTS)
        sbml.save(sbml_file)
        
        logger.info("SBML file for model '{}' saved as {}.".format(sbml,sbml_file))
        with open(name+"/species.pkle",'w') as f:
                pickle.dump((sbml.species,sbml.param,sbml.habitat,sbml.temperature),f)
                species = sbml.species
                param = sbml.param
                habitat = sbml.habitat
                temperature = sbml.temperature
    else:
        with open(name+"/species.pkle",'r') as f:
            species, param, habitat, temperature = pickle.load(f)
        
    if not os.path.exists(config_file):
        cfg = spopdyn.libpssa_config.libpSSA_config(sbml_file, name+"/", species,
                                                    dt=0.1, tend=100, n=3,
                                                    spatial=spatial, gridpoints=GRIDPOINTS,
                                                    K=1000*GRIDPOINTS**2)
        with open(config_file,"w") as f:
            f.write(cfg)
            logger.info("config file saved as {}.".format(config_file))

    if not os.path.exists(name+"/libpssa.log"):
        logger.info("Running pSSAlib...")
        try:
            re = subprocess.check_output((os.path.dirname(__file__)+"/../spopdyn/libpssa/pssa_cli/pssa -c {}"
                                         ).format(config_file), shell=True)
        except Exception as e:
            logger.error(e)
        else:
            with open(name+"/libpssa.log",'w') as f:
                f.write(re)
                
    logger.info("Data extraction...")
    if spatial:
        if not os.path.exists(data_file):
            files = glob.glob("{}/PDM/PSSA_trajectory_*.txt".format(name))
            #data = spopdyn.extract.data_extract_2D(files[0],50,param)
            data = spopdyn.extract.extract_multiple_trajectories_to_timeseries(files,50,param)
            with open(data_file,"w") as f:
                logger.info("Saving data as {}.".format(data_file))
                pickle.dump(data,f)

        else:
            with open(data_file,"r") as f:
                logger.info("Loading data from {}.".format(data_file))
                data = pickle.load(f)

        env = (("Habitat",habitat),
               ("Temperature",temperature),)

        name_ts = ("Regional Species Richness", "Regional Diversity","Local Species Richness","Local Diversity","Local CSI","Local CTI","Local Biomass",)
        print [(k,len(v)) for k,v in data[0].items()]
        ts = [(n,(data[0][n],data[1][n]))
              for n in name_ts] 

        spopdyn.display.experimental_report(env,
                                            param,
                                            ts,
                                            name+"/")


    elif not spatial and not os.path.exists(data_file):
        spopdyn.extract.data_extract_single("{}/PDM/PSSA_trajectory_0_0.txt".format(name))
    

    


